---
import BaseHead from '../components/BaseHead.astro'
import Header from '../components/Header.astro'
import Footer from '../components/Footer.astro'
import Body from '@components/Body.astro'
import Content from '@components/Content.astro'
import { SITE_TITLE } from 'src/config'
import { IoTimeOutline } from 'react-icons/io5'

export interface Props {
  content: {
    title: string
    description: string
    heroImage?: string
    tags: string[]
    createdAt: any
    updatedAt: any
  }
}

const {
  content: { title, description, heroImage, createdAt }
} = Astro.props

// 将原始日期转换为 Date 对象
const createdAtDate = new Date(createdAt)

// 格式化时间
const formattedCreatedAt = createdAtDate.toLocaleString('zh-CN', {
  year: 'numeric',
  month: '2-digit',
  day: '2-digit',
  hour: '2-digit',
  minute: '2-digit',
  second: '2-digit'
})
---

<!DOCTYPE html>
<html lang='en'>
<head>
  <BaseHead
    title={title + ` / ${SITE_TITLE}`}
    description={description}
    image={heroImage}
  />
</head>

<Body>
<Header />
<main class='pt-[56px]'>
  <Content className='pt-6'>
    <div class='mb-8'>
      {
        heroImage && (
          <img
            class='border border-slate-300 dark:border-zinc-700 rounded-xl'
            width={720}
            height={360}
            src={heroImage}
            alt=''
          />
        )
      }
    </div>
    <h1 class='text-3xl my-1 font-mplus'>
      {title}
    </h1>
    <div>
      {description}
    </div>
    <div class='text-xs text-gray-500 dark:text-gray-400 mt-2'>
      <IoTimeOutline className={'inline'} />
      于 {formattedCreatedAt} 发布
    </div>
    <hr class='border-top border-zinc-400 my-4' />
    <div class='post-content'>
      <slot />
    </div>
    <span
      class='underline underline-offset-2 hover:text-orange-500 decoration-orange-500 text-2xl list-disc'
    ></span>
  </Content>
</main>
<Footer />
</Body>
<style lang='scss' is:global>
  .post-content {
    & h1 {
      font-size: 2.25rem; /* text-4xl */
      font-weight: 700; /* font-bold */
      font-family: 'M PLUS Rounded 1c', sans-serif; /* font-mplus */
      line-height: 2.5rem; /* 确保足够的行高 */
      margin-bottom: 0.5rem; /* 添加底部间距 */
    }

    & h2 {
      font-size: 1.5rem; /* text-2xl */
      font-weight: 700;
      font-family: 'M PLUS Rounded 1c', sans-serif;
      line-height: 2rem; /* 调整行高 */
      margin-bottom: 0.5rem; /* 底部间距 */
    }

    & h3 {
      font-size: 1.25rem; /* text-xl */
      font-weight: 700;
      font-family: 'M PLUS Rounded 1c', sans-serif;
      line-height: 1.75rem; /* 调整行高 */
      margin-bottom: 0.5rem;
    }

    & h4 {
      font-size: 1.125rem; /* text-lg */
      font-weight: 700;
      font-family: 'M PLUS Rounded 1c', sans-serif;
      line-height: 1.75rem; /* 调整行高 */
    }

    & h5, & h6 {
      font-weight: 700;
      font-family: 'M PLUS Rounded 1c', sans-serif;
      line-height: 1.5rem; /* 基础行高 */
    }

    & img {
      border: 1px solid rgb(203 213 225); /* border border-slate-300 */
      border-radius: 0.75rem; /* rounded-xl */
      margin-top: 1.5rem; /* mt-6 */
      margin-bottom: 1.5rem; /* mb-6 */
      display: block; /* 确保图片正确显示 */
      max-width: 100%; /* 响应式显示 */
    }

    @media (prefers-color-scheme: dark) {
      & img {
        border-color: rgb(63 63 70); /* dark:border-zinc-700 */
      }
    }

    & p {
      margin-bottom: 1.5rem; /* mb-6 */
      line-height: 1.625; /* 适当的行高 */
    }

    & a {
      text-decoration: underline;
      text-underline-offset: 2px;
      text-decoration-color: rgb(249 115 22); /* decoration-orange-500 */

      &:hover {
        color: rgb(249 115 22); /* hover:text-orange-500 */
      }
    }

    & ul {
      list-style-type: disc; /* list-disc */
      padding-left: 1.5rem; /* 添加左侧缩进 */
      margin-bottom: 1.5rem; /* 底部间距 */
    }

    & pre {
      padding: 1rem; /* p-4 */
      border-radius: 0.75rem; /* rounded-xl */
      position: relative; /* relative */
      margin-top: 1.5rem; /* mt-6 */
      margin-bottom: 1.5rem; /* mb-6 */
      overflow: auto; /* 确保代码可滚动 */

      & copy-code-button {
        position: absolute; /* absolute */
        right: 0.25rem; /* right-1 */
        top: -1rem;
      }
    }

    & p code {
      background-color: rgb(229 231 235); /* bg-gray-200 */
      padding: 0.125rem 0.25rem; /* p-0.5 pl-1 pr-1 合并 */
      color: rgb(239 68 68); /* text-red-500 */
      border-radius: 0.375rem; /* rounded-md */
      font-size: 0.875rem; /* text-sm */

      @media (prefers-color-scheme: dark) {
        background-color: rgb(55 65 81); /* dark:bg-gray-700 */
        color: rgb(255 255 255); /* dark:text-white */
      }
    }

    & blockquote {
      border-left: 4px solid rgb(209 213 219); /* border-l-4 border-gray-300 */
      background-color: rgb(229 231 235); /* bg-gray-200 */
      padding: 0.5rem 0 0.5rem 1rem; /* pl-4 pt-2 pb-2 合并 */
      margin: 1rem 0; /* my-4 合并 */
      color: oklch(92.8% 0.006 264.531);

      @media (prefers-color-scheme: dark) {
        border-left-color: rgb(249 115 22); /* dark:border-orange-500 */
        background-color: rgb(31 41 55); /* dark:bg-gray-800 */
      }

      & p {
        margin-bottom: 0; /* mb-0 */
      }
    }
  }
</style>
<script>
  import '@components/CopyCodeButton'

  let blocks = document.querySelectorAll('pre')
  blocks.forEach(block => {
    let button = document.createElement('copy-code-button')
    let isMouseOver = false // 标记鼠标是否在 pre 元素上

    // 鼠标进入 pre 元素时，显示 copy-code-button 元素
    block.addEventListener('mouseenter', () => {
      isMouseOver = true
      button.style.display = 'block'
    })

    // 鼠标离开 pre 元素时，隐藏 copy-code-button 元素
    block.addEventListener('mouseleave', () => {
      isMouseOver = false
      button.style.display = 'none'
    })

    // 检查页面是否已加载完成，如果是，则根据鼠标状态来显示或隐藏 copy-code-button 元素
    document.addEventListener('DOMContentLoaded', () => {
      if (isMouseOver) {
        button.style.display = 'block'
      } else {
        button.style.display = 'none'
      }
    })

    block.appendChild(button)
  })
</script>
</html>
